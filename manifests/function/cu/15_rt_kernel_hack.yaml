apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: policy-config-rt-kernel-cu
  namespace: cu-subscriptions
  annotations:
    policy.open-cluster-management.io/standards: NIST SP 800-53
    policy.open-cluster-management.io/categories: CM Configuration Management
    policy.open-cluster-management.io/controls: CM-2 Baseline Configuration
spec:
  remediationAction: enforce
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-config-rt-kernel-cu
        spec:
          remediationAction: inform
          severity: low
          namespaceSelector:
            exclude:
              - kube-*
            include:
              - default
          object-templates:
            - complianceType: musthave
              objectDefinition:
                kind: ConfigMap
                apiVersion: v1
                metadata:
                  name: rtos-entrypoint
                data:
                  entrypoint.sh: |
                    #!/bin/sh
                    
                    set -euo pipefail
                    echo "###################################"
                    echo "Script to enable rt kernel"
                    echo "###################################"
                    
                    KERNEL_VER="4.18.0-193.31.1.rt13.81.el8_2.ocptest.x86_64"
                    KERNEL_CURRENT="$(uname -r)"
                    if [ "$KERNEL_VER" == "$KERNEL_CURRENT" ] ; then
                      while true ; do
                        echo "Sleeping loop"
                        sleep 3600
                      done
                    fi
                    
                    TEMPDIR=$(mktemp -d)
                    
                    # Fetch required packages
                    WEBROOT_RT="http://karmatron.mooo.com/kernel-rt"
                    for package in 'core' 'modules' 'modules-extra'; do
                      curl -s ${WEBROOT_RT}/kernel-rt-${package}-${KERNEL_VER}.rpm -o ${TEMPDIR}/kernel-rt-${package}-${KERNEL_VER}.rpm
                    done
                    
                    # Swap to RT kernel
                    rpm-ostree override remove kernel{,-core,-modules,-modules-extra} \
                      --install ${TEMPDIR}/kernel-rt-core-${KERNEL_VER}.rpm \
                      --install ${TEMPDIR}/kernel-rt-modules-${KERNEL_VER}.rpm \
                      --install ${TEMPDIR}/kernel-rt-modules-extra-${KERNEL_VER}.rpm
                    
                    rm -Rf ${TEMPDIR}
                    
                    # Reboot to apply changes
                    systemctl reboot
            - complianceType: musthave
              objectDefinition:
                apiVersion: apps/v1
                kind: DaemonSet
                metadata:
                  name: rtos-ds
                  labels:
                    app: rtos-ds
                spec:
                  selector:
                    matchLabels:
                      app: rtos-ds
                  template:
                    metadata:
                      labels:
                        app: rtos-ds
                    spec:
                      hostNetwork: true
                      nodeSelector:
                        node-role.kubernetes.io/worker-cu: ""
                      containers:
                      - name: rtos-loader
                        image: ubi8/ubi-minimal
                        command: ['sh', '-c', 'cp /script/entrypoint.sh /host/tmp && chmod +x /host/tmp/entrypoint.sh && echo "applying rt kernel" && chroot /host /tmp/entrypoint.sh && sleep infinity']
                        securityContext:
                          privileged: true
                        terminationMessagePath: /dev/termination-log
                        terminationMessagePolicy: FallbackToLogsOnError
                        volumeMounts:
                        - mountPath: /script
                          name: rtos-script
                        - mountPath: /host
                          name: host
                      hostNetwork: true
                      restartPolicy: Always
                      terminationGracePeriodSeconds: 10
                      volumes:
                      - configMap:
                          name: rtos-entrypoint
                        name: rtos-script
                      - hostPath:
                          path: /
                          type: Directory
                        name: host

